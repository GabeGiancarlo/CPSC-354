Programming Assignment 1 (PL 2025)
The aim of this assignment is to implement a calculator in Python using a parser generated by Lark.

The objective is to learn to use a context-free grammar (CFG) as an input for a parser generator and to think about order of operations. You might have to modify the CFG given below so that it behaves as desired.

For proper preparation first do the lab tutorial on how to develop a calculator in 60 minutes.

Deliverables
Work in groups up to 3 people. Create a new private GitHub repo and invite your instructor as a collaborator.

In your new private GitHub group repo, create a new subdirectory Assignment1. Inside that, create the following files (do not change the specified names):

Assignment1
    calculator_cfg.py
    grammar.lark
    specs.md
The .py file will contain your code (see below). The file specs.md will contain detailed specifications of your implementation of your code. They have to contain the names of the methods you are using and their purpose, and in general outline the internal logic of these methods as well as the general logic of the program flow.

Start from the following ambiguous context-free grammar:

exp -> exp '+' exp
exp -> exp '*' exp
exp -> exp '^' exp
exp -> exp '-' exp
exp -> '-' exp 
exp -> 'log' exp 'base' exp
exp -> '(' exp ')'
exp -> number
Your code should first create the AST from the parser generated by Lark, and then compute the final result by recursively evaluating the AST.

You can use https://codeberg.org/alexhkurz/calculator-2024 for orientation.

Grading Guidelines
The grade will be based on how well your parser does on input/output testing (see below) as well on the structure of your code and the detailed specification.
While it is good practice in general to make your program robust with respect to arbitrary input, we will test only with input as defined by the grammar above (where number refers to NUMBER as predefined in Lark).
The grade will take the quality of your detailed specification into account, which should contain a description of the CFG you use as well as a discussion of order of operations.
Important:

Do stick to the given naming conventions because automated tests will be conducted.
To generate a parser, use Lark with input file grammar.lark, containing an appropriate modification of the grammar above.
"Appropriate modification" means that the new grammar should accept the same language but for each input have a unique parse tree compatible with the intended order of operations as specified by the tests (see below).
Testing
Here are some tests that our automated testing software will run. We reserve the right to add further test cases, so do not limit your own testing to the ones below.

If in doubt about what the outcome of certain tests should be (due to ambiguous order of operations), ask us and we can extend the list.

python  calculator_cfg.py "1+2*3"
7
python  calculator_cfg.py "2-(4+2)"
-4
python  calculator_cfg.py "(3+2)*2"
10
python  calculator_cfg.py "--1"
1
python  calculator_cfg.py "2^3^2"
512
python  calculator_cfg.py "2^3+1"
9
python  calculator_cfg.py "2^3*2"
16
python  calculator_cfg.py "log 8 base 2"
3
python  calculator_cfg.py "log 8 base 2 + 1"
4
python  calculator_cfg.py "-3^2"
-9